#Class to represent Tree node
class Node:
#A function to create a new node
    def __init__(self, key):
        self.val = key
        self.left = None
        self.right = None

#time complexity O(n)
#space complexity O(n)
#checking if a tree is a BST using inorder traversal
def bst(root):
 
    #create an empty stack
    stack = []
 
    #create a previous variable initially set to None
    prev = None
 
    #while the stack isn't empty or if root is not None:
    while len(stack) > 0 or root != None:
 
        #if the current node is not None
        if root != None:
            #push it into the stack
            stack.append(root)
            #set the root variable to the left child
            root = root.left

        #if the current node is None    
        else:
            #pop an element from the stack
            root = stack.pop()
            
            #check that the previous value is less than the popped element
            if prev != None:
                if prev.val > root.val:
                    #if it isn't, then the order is violated
                    #so return False
                    return False
            
            #else, set prev to be the last processed node
            #and set prov to be the right child
            prev = root
            root = root.right
    
    #if traversal is complete and False wasn't returned, return True
    return True

#given tree
root = Node(4)
root.left = Node(2)
root.right = Node(6)
root.left.left = Node(1)
root.left.right = Node(3)
root.right.left = Node(5)
root.right.right = Node(7)
bst(root)

#test cases
#cases of broken BSTs
print("cases with broken BSTs")
root1 = Node(4)
root1.left = Node(2)
root1.right = Node(6)
root1.left.left = Node(1)
root1.left.right = Node(7)
root1.right.left = Node(5)
root1.right.right = Node(7)
print(bst(root1))

root2 = Node(4)
root2.left = Node(4)
root2.right = Node(6)
root2.left.left = Node(1)
root2.left.right = Node(3)
root2.right.left = Node(5)
root2.right.right = Node(7)
print(bst(root2))

#cases with valid BSTs
print("\ncases with valid BSTs")

root3 = Node(4)
root3.left = Node(1)
root3.right = Node(6)
root3.left.left = Node(1)
root3.left.right = Node(3)
root3.right.left = Node(5)
root3.right.right = Node(7)
print(bst(root3))

root4 = Node(4)
root4.left = Node(2)
root4.right = Node(6)
root4.left.left = Node(1)
root4.left.right = Node(3)
root4.right.left = Node(4.5)
root4.right.right = Node(7)
print(bst(root4))
