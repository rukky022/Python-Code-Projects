#dictionary to define precedence
precedence = {"(": 3, ")": 3, "*": 2, "/": 2, "+": 1, "-": 1} 
print(precedence)

#helper method that does the actual calculating
def calculate(operandSt, top):
    #pop out the top two operands
    second, first = operandSt.pop(), operandSt.pop()

    #perform the operation and push the new 
    #value into the operand stack
    if top == "+":
        exp = first + second
        operandSt.append(exp)

    elif top == "-":
        exp = first - second
        operandSt.append(exp)

    elif top == "/":
        exp = first / second
        operandSt.append(exp)

    elif top == "*":
        exp = first * second
        operandSt.append(exp)
        
#actual calculator method that takes an expression as a parameter
#time complexity: O(n^2)
#space complexity: O(n^2)
def infixCalc(expression):

    #necessary stacks
    operatorStack = []
    operandStack = []

    #to handle multi-digit numbers, we need two pointers
    start = end = 0

    #while start is less than the length of the expression,
    #and end is less than or equal to the length of the expression
    while start < len(expression) and end != len(expression) + 1:

        #while the value at end is not a space (aka it's a digit/operator)
        #increment end and rerun the loop
        if end < len(expression) and expression[end] != " ":
            end += 1
            continue

        #once end is at the index of a space, 
        #if the expression from start to end is an operator
        elif expression[start:end] in ["+", "-", "*", "/", "(", ")"]:
            #store the operator in a variable
            newOp = expression[start:end]

            #if there are other operators in the operator stack   
            if len(operatorStack) > 0:

                #first check if the new operator is a closing parantheses
                if newOp == ")":

                    #if so, change the new operator to be the top of the stack
                    #and make a new variable that gets the operator after it
                    newOp, top = operatorStack.pop(), operatorStack.pop()

                    #while there are operators in the stack and at least 2 operands
                    while len(operatorStack) > 0 and len(operandStack) > 1:

                        #if top is the opening parantheses
                        if top == "(":
                            #simply perform the operation with the operator
                            #stored in newOp, then set newOp to False meaning that
                            #all but one operation within the parantheses have
                            #been performed and exit the while loop
                            calculate(operandStack, newOp)
                            newOp = False
                            break                         

                        #else, check if the precedence of the operator in top
                        #is greater than or equal to the operator in newOp
                        if precedence[top] <= precedence[newOp]:
                            #if so, pop out the values and perform the calculation
                            #with the operator in newOp
                            calculate(operandStack, newOp)                         
                        
                        #then, shift the operators in the variables again
                        newOp, top = top, operatorStack.pop()

                #if the newOp wasn't a closing parantheses,
                #or if the above if block has finished,                
                #while there are operators in the stack and at least 2 operands
                while len(operatorStack) > 0 and len(operandStack) > 1:

                    #pop out the top operator
                    top = operatorStack.pop()
                    
                    #if the top is an opening parantheses
                    #just push it back in to the stack
                    #since we can't perform an operation with it
                    #and exit the while loop
                    if top == "(":
                        operatorStack.append(top)
                        break

                    #else if newOp is False (from the previous if block)
                    if newOp == False:
                        #perform the final calculation of the parantheses
                        calculate(operandStack, top)                         

                    #else, check if the precedence of the top operator is greater
                    #or equal to the new operator
                    elif precedence[top] >= precedence[newOp]:
                        #if so, pop out the values and perform the calculation
                        calculate(operandStack, top)                         
                    
                    #else, if the top operator is not greater/equal to the new operator
                    else:
                        #add the top operator back onto the stack 
                        #and exit the inner while loop
                        operatorStack.append(top)
                        break
                    
                #once all operations are done, and if newOp isn't False
                #(meaning that it isn't storing an operator that hasn't been executed)
                if newOp != False:
                    #add the new operator
                    operatorStack.append(newOp)

            #else, if there were no operators in the stack to start with,
            else:
                #add the new operator
                operatorStack.append(newOp)


        #if the expression wasn't an operator, append the float version of the
        #value onto the operand stack
        else:
            operandStack.append(float(expression[start:end]))

        #update the start and end pointers
        start = end + 1
        end += 2

    #once the douple loop has finished, if there is still more than 1 number 
    #in the operandStack  
    if len(operandStack) > 1:
        #run a while loop to finish the rest of the calculations 
        while len(operandStack) > 1 and len(operatorStack) > 0:
            top = operatorStack.pop()
            calculate(operandStack, top)

    #print the final result
    print("equation: ", expression, "\nresult:", operandStack.pop(), "\n")
    
#expression
exp = "10 * 2 + 15 / 3"
infixCalc(exp)

#test cases
exp2 = "3 + 5"
infixCalc(exp2)

exp3 = "3 - 5"
infixCalc(exp3)

exp4 = "3 * 5"
infixCalc(exp4)

exp5 = "3 / 5"
infixCalc(exp5)

exp6 = "3 + 5 - 2"
infixCalc(exp6)

exp7 = "5 * 2 / 1"
infixCalc(exp7)

exp8 = "5 + 2 * 8 / 4 + 3"
infixCalc(exp8)

exp9 = "2 + ( 5 - 3 * 1 ) - 6"
infixCalc(exp9)

exp10 = "2 + ( 5 - 3 * 1 / 3 + 7 ) - 6"
infixCalc(exp10)

exp11 = "2 + ( 5 * 2 * 6 * 3 / 1 ) - 6"
infixCalc(exp11)

exp12 = "( 5 + 3 )"
infixCalc(exp12)

exp13 = "( 6 + 3 ) + ( 2 - 1 )"
infixCalc(exp13)
